Vagrant.require_version ">= 1.7.0"

## All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure("2") do |config|
  config.vm.provider "virtualbox"

  def set_vbox(vb, config)
    vb.gui = false
    vb.memory = 1024
    vb.cpus = 2

    # case $os_image
    # when :centos7
    #   config.vm.box = "bento/centos-7.3"
    # when :ubuntu16
    #   config.vm.box = "bento/ubuntu-16.04"
    # end

    config.vm.box = "generic/centos7"
  end

  ## Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  ## config.vm.box = "generic/centos7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  ips = ["ssh 10.0.3.202", "ssh 10.0.3.203"]
  (0..1).each do |id|
    mid = id + 1
    config.vm.define "mysql_0#{mid}" do |node|
      node.vm.hostname = "mysql-0#{mid}"
      #config.ssh.insert_key = false
      #?
      #node.ssh.username = 'vagrant'
      #node.ssh.private_key_path = ["/home/yann/.ssh/id_rsa"]
      ##node.vm.provision "file", source: "/home/yann/test/my_id_rsa.pub", destination: "/home/vagrant/.ssh/my_id_rsa.pub"
      #node.vm.provision "file", source: "/home/yann/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
      ##config.vm.provision "shell", inline: "cat /home/vagrant/.ssh/my_id_rsa.pub >> /home/vagrant/.ssh/authorized_keys", privileged: false
      config.vm.provision "file", source: "my_id_rsa.pub", destination: "~/.ssh/my_id_rsa.pub"
      config.vm.provision "file", source: "/root/.ssh/id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
      config.vm.provision "shell", inline: "cat ~/.ssh/my_id_rsa.pub >> ~/.ssh/authorized_keys", privileged: false
      config.vm.provision "shell", inline: "cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys", privileged: false
      node.vm.network "forwarded_port", guest: 9090, host: 9090 + id
      node.vm.network "forwarded_port", guest: 9093, host: 9093 + id
      node.vm.network "forwarded_port", guest: 3000, host: 3000 + id
      node.vm.synced_folder ".", "/vagrant" ##, disabled: true
      # node.vm.network :private_network, ip: "#{ips[id]}",  auto_config: true
      #config.vm.network "public_network" #, bridge: "eth1:wlp3s0"
      # ?
      node.vm.network "public_network", bridge: "wlp3s0",adapter: 2, auto_config: false
      # node.vm.network :public_network, ip: "#{ips[id]}",  auto_config: true
      node.vm.provider :virtualbox do |vb, override|
        vb.name = "mysql_0#{mid}"
        set_vbox(vb, override)
      end
    end
  end

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
